 - solve problems recursively by trying to build a solution incrementally, one piece at a time, 
 - remove those solutions that fail to satisfy the constraints of the problem at any point of time by time, 
   here, is referred to the time elapsed till reaching any level of the search tree
- Backtracking works as similar as DFS traversing
- We need stack to push the values and pop if if fails certain conditions

There are three types of problems in backtracking –

Decision Problem – In this, we search for a feasible solution.
Optimization Problem – In this, we search for the best solution.
Enumeration Problem – In this, we find all feasible solutions.

-backtracking algorithms are generally exponential in both time and space.
- IMP :Dynamic Programming or Greedy Algorithms PREFERED overe backtracking because--> most of the problems, can be solved using  in logarithmic, linear, linear-logarithmic time complexity in order of input size, and therefore , but in Bacltracking it takes exponential time and space complexisty hence.

-However there are some problem which can be solved using BACKTRACKING only.


###############################################

Below are the Examples of backtracking :

1.N Queens Problem
2.Warnsdorff’s Algorithm
3.Word Break Problem
4.Remove Invalid Parenthesis
5.Match a pattern and string using regular expression
6.Find Path from corner cell to middle cell in a maze
7.Hamiltonian cycle
8.Sudoku
9.M Coloring Problem
10.Rat in a Maze
11.Print all permutations of a given string
12.Crptarithmetic puzzle
13.Find if there is a path of more than k length from a source
14.Shortest safe route in a path with landmines
15.Partition of a set into k subsets with equal sum
16.longest possible route in a matrix with hurdles
17.Print palindromic partitions string
18.Print all possible paths from top left to bottom right of a mXn matrix
19.Subset sum
20.Tug of war
###############################################



Example : Dynamic Programming or Greedy Algorithms

[ 0,  1,  0,  0]
[ 0,  0,  0,  1]
[ 1,  0,  0,  0]
[ 0,  0,  1,  0]


1) Start in the leftmost column
2) If all queens are placed
    return true
3) Try all rows in the current column.  Do following for every tried row.
    a) If the queen can be placed safely in this row then mark this [row, 
        column] as part of the solution and recursively check if placing  
        queen here leads to a solution.
    b) If placing the queen in [row, column] leads to a solution then return 
        true.
    c) If placing queen doesn't lead to a solution then unmark this [row, 
        column] (Backtrack) and go to step (a) to try other rows.
3) If all rows have been tried and nothing worked, return false to trigger 
    backtracking.
    
 
 
 
 
