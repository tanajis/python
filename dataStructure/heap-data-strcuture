-ref :https://www.geeksforgeeks.org/binary-heap/
-https://www.geeksforgeeks.org/max-heap-in-python/
-https://www.youtube.com/watch?v=NEtwJASLU8Q

-A Binary Heap is a Binary Tree with following properties.
 1.It’s a complete tree (All node expect leaf 2 child and leaf should be as left as possible)
 2.It must be min or max
    min : every parent(including root) must be min than child
    max : every parent(including root) must be max than child


Applications of Heap:
    1.used in heap Sort (O(nLogn) time)
    2.used in Priority Queue

    program:
    a) K’th Largest Element in an array.
    b) Sort an almost sorted array/
    c) Merge K Sorted Arrays.

Operations:(for min heap) Ref :https://www.geeksforgeeks.org/insertion-and-deletion-in-heaps/
    1.getMini() : It returns the root element of Min Heap
    2.extractMin():Removes the minimum element from MinHeap
    3. insert(): Inserting a new key takes O(Log n) time. 
          1.Add a NEW key at the END of the tree 
          2.IF new key is greater than its parent -->keep as it is
          else swap it. Do it till the heap satsdy all conditions
          
    
    4.delete(): Deleting a key also takes O(Logn) time. 
              1.Replace the ROOT or element to be deleted by the LAST ELEMENT.
              2.Delete the last element from the Heap.
              3.Since, the last element is now placed at the position of the root node. 
              4.So, it may not follow the heap property. 
              5.Therefore, heapify the last node placed at the position of root.



    5.decreaseKey()


Array representation:

     Ex. min heap
     
     
           10
          /  \
         15   19
       /  \    / \
      20   30   25 39
     / \   /  
    23 40 35
    
    Traverse Breadth first traversal
    Array = [10,15,19,20,30,25,39,23,40,35]
    
    for every element at index k, its parents is at index ceil(k/2) Ex. 35 is at 10th index so its parrent must be at 5th index that is 30
    
    insert(push) :   add at the END of array(at n index) and compare with  its parrent at n/2 if smaller than parent then swap.. so on
    
    pop(delete root): remove root(START) and move last elelement to root position(start of array).
                      And swap with child if it is greater than child (prefer to swap with smallest childEx. if childs are 35 and 40 then prefer 35)
                     this is in case of min heap. In case of max heap prefer largets one
    delete(any element other than root):Replace the value to be deleted by last value and adjust as per above.
                     
